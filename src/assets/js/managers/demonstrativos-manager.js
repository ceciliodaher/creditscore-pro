/**
 * demonstrativos-manager.js
 * Gerenciador centralizado de Demonstrativos Financeiros (Balan√ßo e DRE)
 *
 * FASE 0: Multi-empresa com isolamento de dados
 * - Singleton pattern para garantir √∫nica inst√¢ncia
 * - Valida√ß√£o obrigat√≥ria de empresaId em todos os saves/loads
 * - Chaves compostas: ${tipo}_${empresaId}
 * - NO FALLBACKS: Exce√ß√µes expl√≠citas quando empresaId n√£o dispon√≠vel
 *
 * @version 1.0.0
 * @date 2025-10-28
 */

class DemonstrativosManager {
    static #instance = null;

    /**
     * @param {Object} dbManager - Inst√¢ncia do CreditscoreIndexedDB
     */
    constructor(dbManager) {
        // Impedir cria√ß√£o direta (usar getInstance)
        if (DemonstrativosManager.#instance) {
            throw new Error(
                'DemonstrativosManager: Use DemonstrativosManager.getInstance() para obter a inst√¢ncia'
            );
        }

        // Valida√ß√£o obrigat√≥ria - NO FALLBACKS
        if (!dbManager) {
            throw new Error('DemonstrativosManager: dbManager obrigat√≥rio n√£o fornecido');
        }

        // Validar que dbManager tem a API esperada
        if (typeof dbManager.save !== 'function' || typeof dbManager.get !== 'function') {
            throw new Error('DemonstrativosManager: dbManager n√£o possui API esperada (save, get)');
        }

        this.db = dbManager;
        console.log('‚úÖ DemonstrativosManager instanciado');
    }

    /**
     * Obt√©m a inst√¢ncia singleton
     * @param {Object} dbManager - Inst√¢ncia do CreditscoreIndexedDB (obrigat√≥rio na primeira chamada)
     * @returns {DemonstrativosManager}
     */
    static getInstance(dbManager = null) {
        if (!DemonstrativosManager.#instance) {
            if (!dbManager) {
                throw new Error(
                    'DemonstrativosManager: dbManager obrigat√≥rio na primeira chamada de getInstance()'
                );
            }
            DemonstrativosManager.#instance = new DemonstrativosManager(dbManager);
        }

        return DemonstrativosManager.#instance;
    }

    /**
     * FASE 0: Obt√©m empresaId do EmpresaAccessManager
     * @private
     * @returns {number} ID da empresa ativa
     * @throws {Error} Se empresaId n√£o dispon√≠vel
     */
    #getEmpresaId() {
        const empresaId = window.EmpresaAccessManager?.getContext()?.empresaId;

        if (!empresaId) {
            throw new Error(
                'empresaId n√£o dispon√≠vel - ' +
                'Nenhuma empresa selecionada. Use CompanySelector para selecionar uma empresa.'
            );
        }

        return empresaId;
    }

    /**
     * FASE 0: Gera chave composta para demonstrativo
     * @private
     * @param {string} tipo - 'balanco' ou 'dre'
     * @returns {string} Chave no formato "{tipo}_{empresaId}"
     */
    #getCompositeKey(tipo) {
        const empresaId = this.#getEmpresaId();
        return `${tipo}_${empresaId}`;
    }

    /**
     * Salva dados de Balan√ßo Patrimonial
     * @param {Object} dadosBalanco - Dados do balan√ßo (68 contas)
     * @returns {Promise<void>}
     */
    async saveBalanco(dadosBalanco) {
        if (!dadosBalanco || typeof dadosBalanco !== 'object') {
            throw new Error('DemonstrativosManager: dadosBalanco deve ser um objeto v√°lido');
        }

        try {
            const empresaId = this.#getEmpresaId();
            const key = this.#getCompositeKey('balanco');

            const data = {
                key: key,
                empresaId: empresaId,
                tipo: 'balanco',
                dados: dadosBalanco,
                timestamp: Date.now()
            };

            await this.db.save('calculation_data', data);

            console.log(`üíæ Balan√ßo salvo (empresa ${empresaId})`);
        } catch (error) {
            console.error('‚ùå Erro ao salvar Balan√ßo:', error);
            throw new Error(`Falha ao salvar Balan√ßo: ${error.message}`);
        }
    }

    /**
     * Carrega dados de Balan√ßo Patrimonial
     * @returns {Promise<Object|null>} Dados do balan√ßo ou null se n√£o existir
     */
    async loadBalanco() {
        try {
            const empresaId = this.#getEmpresaId();
            const key = this.#getCompositeKey('balanco');

            const data = await this.db.get('calculation_data', key);

            if (!data) {
                console.log(`‚ÑπÔ∏è Nenhum dado de Balan√ßo encontrado para empresa ${empresaId}`);
                return null;
            }

            console.log(`üì• Balan√ßo carregado (empresa ${empresaId})`);
            return data.dados;
        } catch (error) {
            console.error('‚ùå Erro ao carregar Balan√ßo:', error);
            throw new Error(`Falha ao carregar Balan√ßo: ${error.message}`);
        }
    }

    /**
     * Salva dados de DRE (Demonstra√ß√£o do Resultado do Exerc√≠cio)
     * @param {Object} dadosDRE - Dados da DRE (30 contas)
     * @returns {Promise<void>}
     */
    async saveDRE(dadosDRE) {
        if (!dadosDRE || typeof dadosDRE !== 'object') {
            throw new Error('DemonstrativosManager: dadosDRE deve ser um objeto v√°lido');
        }

        try {
            const empresaId = this.#getEmpresaId();
            const key = this.#getCompositeKey('dre');

            const data = {
                key: key,
                empresaId: empresaId,
                tipo: 'dre',
                dados: dadosDRE,
                timestamp: Date.now()
            };

            await this.db.save('calculation_data', data);

            console.log(`üíæ DRE salva (empresa ${empresaId})`);
        } catch (error) {
            console.error('‚ùå Erro ao salvar DRE:', error);
            throw new Error(`Falha ao salvar DRE: ${error.message}`);
        }
    }

    /**
     * Carrega dados de DRE
     * @returns {Promise<Object|null>} Dados da DRE ou null se n√£o existir
     */
    async loadDRE() {
        try {
            const empresaId = this.#getEmpresaId();
            const key = this.#getCompositeKey('dre');

            const data = await this.db.get('calculation_data', key);

            if (!data) {
                console.log(`‚ÑπÔ∏è Nenhum dado de DRE encontrado para empresa ${empresaId}`);
                return null;
            }

            console.log(`üì• DRE carregada (empresa ${empresaId})`);
            return data.dados;
        } catch (error) {
            console.error('‚ùå Erro ao carregar DRE:', error);
            throw new Error(`Falha ao carregar DRE: ${error.message}`);
        }
    }

    /**
     * Salva an√°lises financeiras (AH, AV, Indicadores)
     * @param {string} tipo - 'balanco' ou 'dre'
     * @param {Object} analises - Objeto com { ah, av, indicadores }
     * @returns {Promise<void>}
     */
    async saveAnalises(tipo, analises) {
        if (!tipo || !['balanco', 'dre'].includes(tipo)) {
            throw new Error('DemonstrativosManager: tipo deve ser "balanco" ou "dre"');
        }

        if (!analises || typeof analises !== 'object') {
            throw new Error('DemonstrativosManager: analises deve ser um objeto v√°lido');
        }

        try {
            const empresaId = this.#getEmpresaId();
            const key = this.#getCompositeKey(`analises_${tipo}`);

            const data = {
                key: key,
                empresaId: empresaId,
                tipo: `analises_${tipo}`,
                dados: analises,
                timestamp: Date.now()
            };

            await this.db.save('calculation_data', data);

            console.log(`üíæ An√°lises de ${tipo} salvas (empresa ${empresaId})`);
        } catch (error) {
            console.error(`‚ùå Erro ao salvar an√°lises de ${tipo}:`, error);
            throw new Error(`Falha ao salvar an√°lises de ${tipo}: ${error.message}`);
        }
    }

    /**
     * Carrega an√°lises financeiras
     * @param {string} tipo - 'balanco' ou 'dre'
     * @returns {Promise<Object|null>} An√°lises ou null se n√£o existir
     */
    async loadAnalises(tipo) {
        if (!tipo || !['balanco', 'dre'].includes(tipo)) {
            throw new Error('DemonstrativosManager: tipo deve ser "balanco" ou "dre"');
        }

        try {
            const empresaId = this.#getEmpresaId();
            const key = this.#getCompositeKey(`analises_${tipo}`);

            const data = await this.db.get('calculation_data', key);

            if (!data) {
                console.log(`‚ÑπÔ∏è Nenhuma an√°lise de ${tipo} encontrada para empresa ${empresaId}`);
                return null;
            }

            console.log(`üì• An√°lises de ${tipo} carregadas (empresa ${empresaId})`);
            return data.dados;
        } catch (error) {
            console.error(`‚ùå Erro ao carregar an√°lises de ${tipo}:`, error);
            throw new Error(`Falha ao carregar an√°lises de ${tipo}: ${error.message}`);
        }
    }

    /**
     * Limpa todos os dados da empresa ativa (Balan√ßo, DRE, An√°lises)
     * @returns {Promise<void>}
     */
    async clearAll() {
        try {
            const empresaId = this.#getEmpresaId();

            // Limpar todos os demonstrativos
            const keys = [
                this.#getCompositeKey('balanco'),
                this.#getCompositeKey('dre'),
                this.#getCompositeKey('analises_balanco'),
                this.#getCompositeKey('analises_dre')
            ];

            for (const key of keys) {
                try {
                    await this.db.delete('calculation_data', key);
                    console.log(`üóëÔ∏è Removido: ${key}`);
                } catch (error) {
                    // Se n√£o existir, apenas logar warning
                    console.warn(`‚ö†Ô∏è N√£o foi poss√≠vel remover ${key}:`, error.message);
                }
            }

            console.log(`‚úÖ Todos os demonstrativos da empresa ${empresaId} foram limpos`);
        } catch (error) {
            console.error('‚ùå Erro ao limpar demonstrativos:', error);
            throw new Error(`Falha ao limpar demonstrativos: ${error.message}`);
        }
    }

    /**
     * Verifica se existem dados salvos para a empresa ativa
     * @returns {Promise<Object>} Status de exist√™ncia { balanco: boolean, dre: boolean }
     */
    async checkDataExists() {
        try {
            const empresaId = this.#getEmpresaId();

            const balanco = await this.loadBalanco();
            const dre = await this.loadDRE();

            return {
                empresaId: empresaId,
                balanco: balanco !== null,
                dre: dre !== null
            };
        } catch (error) {
            console.error('‚ùå Erro ao verificar exist√™ncia de dados:', error);
            throw new Error(`Falha ao verificar dados: ${error.message}`);
        }
    }
}

// Disponibilizar globalmente
if (typeof window !== 'undefined') {
    window.DemonstrativosManager = DemonstrativosManager;
}

// Export para ES6 modules
export default DemonstrativosManager;

console.log('‚úÖ DemonstrativosManager carregado');
