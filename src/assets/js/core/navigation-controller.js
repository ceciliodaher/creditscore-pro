/* =====================================
   NAVIGATION-CONTROLLER.JS
   Gerenciamento de navega√ß√£o pelos 8 m√≥dulos com valida√ß√µes de neg√≥cio
   NO FALLBACKS - NO HARDCODED DATA
   ===================================== */

/**
 * Controlador de navega√ß√£o entre m√≥dulos com valida√ß√£o de progress√£o
 * Complementa tabs.js (HierarchicalNavigation) com l√≥gica de neg√≥cio:
 * - Valida√ß√£o de m√≥dulos obrigat√≥rios antes de avan√ßar
 * - Controle de depend√™ncias entre m√≥dulos
 * - Sistema de bloqueio/desbloqueio de m√≥dulos
 * - Controle de progresso (0-100%)
 * - Persist√™ncia de estado de navega√ß√£o
 *
 * @class NavigationController
 */
export class NavigationController {
    /**
     * @param {Object} config - Configura√ß√£o completa do sistema (creditscore-config.json)
     * @param {Object} messages - Mensagens do sistema (messages.json)
     * @param {HierarchicalNavigation} hierarchicalNav - Inst√¢ncia do HierarchicalNavigation (tabs.js)
     * @throws {Error} Se config, messages ou hierarchicalNav ausentes ou inv√°lidos
     */
    constructor(config, messages, hierarchicalNav) {
        // Valida√ß√£o obrigat√≥ria - NO FALLBACKS
        if (!config) {
            throw new Error('NavigationController: config obrigat√≥ria n√£o fornecida');
        }

        if (!messages) {
            throw new Error('NavigationController: messages obrigat√≥rio n√£o fornecido');
        }

        if (!hierarchicalNav) {
            throw new Error('NavigationController: hierarchicalNav obrigat√≥rio n√£o fornecido');
        }

        // Validar estrutura m√≠nima da config
        if (!config.modules || !Array.isArray(config.modules)) {
            throw new Error('NavigationController: config.modules deve ser um array');
        }

        if (typeof config.totalSteps !== 'number' || config.totalSteps < 1) {
            throw new Error('NavigationController: config.totalSteps deve ser um n√∫mero positivo');
        }

        if (!config.validationRules) {
            throw new Error('NavigationController: config.validationRules obrigat√≥ria');
        }

        if (!config.requiredFields) {
            throw new Error('NavigationController: config.requiredFields obrigat√≥rio');
        }

        // Validar messages
        if (!messages.navigation) {
            throw new Error('NavigationController: messages.navigation obrigat√≥rio');
        }

        this.config = config;
        this.messages = messages;
        this.tabs = hierarchicalNav;

        // Estado de navega√ß√£o
        this.currentModule = 1;
        this.completedModules = new Set();
        this.lockedModules = new Set();
        this.blockedModules = new Map(); // moduleId -> reason
        this.navigationHistory = [];

        // M√≥dulos computados (n√£o edit√°veis) - extrair da config
        this.computedModules = new Set(
            config.modules
                .filter(m => m.computed === true)
                .map(m => m.id)
        );

        // Depend√™ncias entre m√≥dulos (hardcoded por enquanto, pode vir da config no futuro)
        this.moduleDependencies = new Map([
            [4, [2]], // √çndices dependem de Demonstra√ß√µes
            [5, [1, 2, 3]], // Scoring depende de Cadastro, Demonstra√ß√µes, Endividamento
            [8, [1, 2]] // Relat√≥rios dependem de Cadastro e Demonstra√ß√µes (m√≠nimo)
        ]);

        console.log('‚úÖ NavigationController instanciado');
    }

    /**
     * Inicializa√ß√£o ass√≠ncrona
     * @returns {Promise<boolean>}
     */
    async init() {
        try {
            // Verificar integra√ß√£o com tabs.js
            if (typeof this.tabs.getCurrentTab !== 'function') {
                throw new Error('NavigationController: hierarchicalNav n√£o possui API esperada (getCurrentTab)');
            }

            if (typeof this.tabs.switchToTab !== 'function') {
                throw new Error('NavigationController: hierarchicalNav n√£o possui API esperada (switchToTab)');
            }

            // Restaurar estado salvo se existir
            this.restoreNavigationState();

            // Sincronizar estado inicial com tabs.js
            this.currentModule = this.tabs.getCurrentTab();

            // Atualizar estado visual inicial
            this.#updateProgressBar();
            this.#updateModuleIndicators();

            console.log(`‚úÖ NavigationController inicializado - M√≥dulo atual: ${this.currentModule}`);
            return true;
        } catch (error) {
            throw new Error(`NavigationController: Erro na inicializa√ß√£o - ${error.message}`);
        }
    }

    /**
     * Valida se pode navegar para o m√≥dulo destino
     * @param {number} toModuleId - ID do m√≥dulo destino (1-8)
     * @returns {boolean} true se permitido, false caso contr√°rio
     */
    canNavigateTo(toModuleId) {
        // Validar ID
        if (typeof toModuleId !== 'number' || toModuleId < 1 || toModuleId > this.config.totalSteps) {
            throw new Error(`NavigationController: ID de m√≥dulo inv√°lido: ${toModuleId}`);
        }

        // Permitir voltar sempre (navega√ß√£o para tr√°s n√£o tem restri√ß√µes)
        if (toModuleId < this.currentModule) {
            return true;
        }

        // Permitir ficar no mesmo m√≥dulo
        if (toModuleId === this.currentModule) {
            return true;
        }

        // Verificar se m√≥dulo atual √© obrigat√≥rio e est√° completo
        const currentModuleConfig = this.#getModuleConfig(this.currentModule);
        if (!currentModuleConfig) {
            throw new Error(`NavigationController: Configura√ß√£o do m√≥dulo ${this.currentModule} n√£o encontrada`);
        }

        if (currentModuleConfig.required === true && !this.isModuleCompleted(this.currentModule)) {
            const reason = `Complete o m√≥dulo "${currentModuleConfig.title}" antes de continuar`;
            this.blockedModules.set(toModuleId, reason);

            // Disparar evento de navega√ß√£o bloqueada
            this.#dispatchEvent('navigationBlocked', {
                fromModule: this.currentModule,
                toModule: toModuleId,
                reason: reason
            });

            return false;
        }

        // Verificar depend√™ncias do m√≥dulo destino
        const dependencies = this.moduleDependencies.get(toModuleId);
        if (dependencies && dependencies.length > 0) {
            for (const depId of dependencies) {
                if (!this.completedModules.has(depId)) {
                    const depModule = this.#getModuleConfig(depId);
                    if (!depModule) {
                        throw new Error(`NavigationController: Configura√ß√£o do m√≥dulo dependente ${depId} n√£o encontrada`);
                    }

                    const reason = `√â necess√°rio completar "${depModule.title}" primeiro`;
                    this.blockedModules.set(toModuleId, reason);

                    // Disparar evento de navega√ß√£o bloqueada
                    this.#dispatchEvent('navigationBlocked', {
                        fromModule: this.currentModule,
                        toModule: toModuleId,
                        reason: reason,
                        missingDependency: depId
                    });

                    return false;
                }
            }
        }

        // Verificar se m√≥dulo est√° explicitamente bloqueado
        if (this.lockedModules.has(toModuleId)) {
            // Validar consist√™ncia: m√≥dulo bloqueado deve ter motivo
            if (!this.blockedModules.has(toModuleId)) {
                throw new Error(`NavigationController: m√≥dulo ${toModuleId} est√° locked mas sem motivo em blockedModules - estado inconsistente`);
            }

            const reason = this.blockedModules.get(toModuleId);

            this.#dispatchEvent('navigationBlocked', {
                fromModule: this.currentModule,
                toModule: toModuleId,
                reason: reason
            });

            return false;
        }

        // Navega√ß√£o permitida
        this.blockedModules.delete(toModuleId);

        this.#dispatchEvent('navigationAllowed', {
            fromModule: this.currentModule,
            toModule: toModuleId
        });

        return true;
    }

    /**
     * Navega para um m√≥dulo espec√≠fico
     * @param {number} moduleId - ID do m√≥dulo (1-8)
     * @returns {boolean} true se navega√ß√£o bem-sucedida
     */
    navigateToModule(moduleId) {
        // Validar ID
        if (typeof moduleId !== 'number' || moduleId < 1 || moduleId > this.config.totalSteps) {
            throw new Error(`NavigationController: ID de m√≥dulo inv√°lido: ${moduleId}`);
        }

        // Validar navega√ß√£o
        if (!this.canNavigateTo(moduleId)) {
            // Obter motivo expl√≠cito do bloqueio
            let reason;
            if (this.blockedModules.has(moduleId)) {
                reason = this.blockedModules.get(moduleId);
            } else {
                // Navega√ß√£o foi bloqueada por l√≥gica interna (valida√ß√£o, depend√™ncias, etc)
                reason = 'Navega√ß√£o bloqueada por valida√ß√£o de regras de neg√≥cio';
            }

            console.warn(`‚ö†Ô∏è Navega√ß√£o bloqueada para m√≥dulo ${moduleId}: ${reason}`);
            return false;
        }

        // Registrar no hist√≥rico
        this.navigationHistory.push({
            from: this.currentModule,
            to: moduleId,
            timestamp: Date.now()
        });

        // Atualizar estado atual
        const previousModule = this.currentModule;
        this.currentModule = moduleId;

        // Delegar navega√ß√£o UI para tabs.js
        this.tabs.switchToTab(moduleId);

        // Atualizar visualiza√ß√£o
        this.#updateProgressBar();
        this.#updateModuleIndicators();

        // Salvar estado
        this.saveNavigationState();

        console.log(`üß≠ Navega√ß√£o: M√≥dulo ${previousModule} ‚Üí ${moduleId}`);
        return true;
    }

    /**
     * Valida se o m√≥dulo atual est√° completo
     * @returns {boolean}
     */
    validateCurrentModule() {
        return this.isModuleCompleted(this.currentModule);
    }

    /**
     * Verifica se um m√≥dulo est√° completo
     * @param {number} moduleId - ID do m√≥dulo
     * @returns {boolean}
     */
    isModuleCompleted(moduleId) {
        // Validar ID
        if (typeof moduleId !== 'number' || moduleId < 1 || moduleId > this.config.totalSteps) {
            throw new Error(`NavigationController: ID de m√≥dulo inv√°lido: ${moduleId}`);
        }

        // M√≥dulos computed s√£o sempre "completos" (calculados automaticamente)
        if (this.computedModules.has(moduleId)) {
            return true;
        }

        // Verificar se j√° marcado como completo
        if (this.completedModules.has(moduleId)) {
            return true;
        }

        // Obter nome do m√≥dulo para buscar campos obrigat√≥rios
        const moduleConfig = this.#getModuleConfig(moduleId);
        if (!moduleConfig) {
            throw new Error(`NavigationController: Configura√ß√£o do m√≥dulo ${moduleId} n√£o encontrada`);
        }

        const moduleName = moduleConfig.name;
        const requiredFields = this.config.requiredFields[moduleName];

        // Se n√£o h√° campos obrigat√≥rios, m√≥dulo √© opcional
        if (!requiredFields || !Array.isArray(requiredFields) || requiredFields.length === 0) {
            return true;
        }

        // Verificar se todos os campos obrigat√≥rios est√£o preenchidos
        const allFieldsFilled = requiredFields.every(fieldName => {
            const field = document.querySelector(`[name="${fieldName}"]`);

            if (!field) {
                console.warn(`‚ö†Ô∏è Campo obrigat√≥rio "${fieldName}" n√£o encontrado no DOM`);
                return false;
            }

            // Verificar se tem valor n√£o vazio
            const value = field.value;
            return value !== null && value !== undefined && value.trim() !== '';
        });

        return allFieldsFilled;
    }

    /**
     * Calcula o progresso geral (0-100%)
     * @returns {number} Porcentagem de progresso
     */
    getProgress() {
        const totalModules = this.config.totalSteps;
        const completedCount = this.completedModules.size;

        if (totalModules === 0) {
            throw new Error('NavigationController: totalSteps n√£o pode ser 0');
        }

        return Math.round((completedCount / totalModules) * 100);
    }

    /**
     * Obt√©m status de um m√≥dulo
     * @param {number} moduleId - ID do m√≥dulo
     * @returns {Object} { completed: boolean, locked: boolean, blocked: boolean, blockReason: string|null }
     */
    getModuleStatus(moduleId) {
        // Validar ID
        if (typeof moduleId !== 'number' || moduleId < 1 || moduleId > this.config.totalSteps) {
            throw new Error(`NavigationController: ID de m√≥dulo inv√°lido: ${moduleId}`);
        }

        return {
            id: moduleId,
            completed: this.completedModules.has(moduleId),
            locked: this.lockedModules.has(moduleId),
            blocked: this.blockedModules.has(moduleId),
            // Retorna motivo expl√≠cito se bloqueado, sen√£o null
            blockReason: this.blockedModules.has(moduleId) ? this.blockedModules.get(moduleId) : null,
            isCurrent: moduleId === this.currentModule,
            isComputed: this.computedModules.has(moduleId)
        };
    }

    /**
     * Desbloqueia um m√≥dulo
     * @param {number} moduleId - ID do m√≥dulo
     */
    unlockModule(moduleId) {
        // Validar ID
        if (typeof moduleId !== 'number' || moduleId < 1 || moduleId > this.config.totalSteps) {
            throw new Error(`NavigationController: ID de m√≥dulo inv√°lido: ${moduleId}`);
        }

        this.lockedModules.delete(moduleId);
        this.blockedModules.delete(moduleId);

        console.log(`üîì M√≥dulo ${moduleId} desbloqueado`);

        this.#updateModuleIndicators();
    }

    /**
     * Bloqueia um m√≥dulo com raz√£o
     * @param {number} moduleId - ID do m√≥dulo
     * @param {string} reason - Motivo do bloqueio
     */
    lockModule(moduleId, reason) {
        // Validar ID
        if (typeof moduleId !== 'number' || moduleId < 1 || moduleId > this.config.totalSteps) {
            throw new Error(`NavigationController: ID de m√≥dulo inv√°lido: ${moduleId}`);
        }

        if (typeof reason !== 'string' || reason.trim() === '') {
            throw new Error('NavigationController: reason deve ser uma string n√£o vazia');
        }

        this.lockedModules.add(moduleId);
        this.blockedModules.set(moduleId, reason);

        console.log(`üîí M√≥dulo ${moduleId} bloqueado: ${reason}`);

        this.#updateModuleIndicators();
    }

    /**
     * Marca m√≥dulo como completo
     * @param {number} moduleId - ID do m√≥dulo
     */
    markModuleComplete(moduleId) {
        // Validar ID
        if (typeof moduleId !== 'number' || moduleId < 1 || moduleId > this.config.totalSteps) {
            throw new Error(`NavigationController: ID de m√≥dulo inv√°lido: ${moduleId}`);
        }

        // Adicionar aos completos
        this.completedModules.add(moduleId);

        // Desbloquear se estava bloqueado
        this.lockedModules.delete(moduleId);
        this.blockedModules.delete(moduleId);

        // Integrar com tabs.js (marcar tab como completa)
        if (typeof this.tabs.markTabAsCompleted === 'function') {
            this.tabs.markTabAsCompleted(moduleId);
        }

        console.log(`‚úÖ M√≥dulo ${moduleId} marcado como completo`);

        // Atualizar visualiza√ß√£o
        this.#updateProgressBar();
        this.#updateModuleIndicators();

        // Disparar evento
        this.#dispatchEvent('progressUpdated', {
            moduleId,
            progress: this.getProgress(),
            completedModules: Array.from(this.completedModules)
        });

        // Verificar se todos m√≥dulos obrigat√≥rios est√£o completos
        this.#checkAllModulesCompleted();

        // Salvar estado
        this.saveNavigationState();
    }

    /**
     * Desmarca m√≥dulo como completo
     * @param {number} moduleId - ID do m√≥dulo
     */
    markModuleIncomplete(moduleId) {
        // Validar ID
        if (typeof moduleId !== 'number' || moduleId < 1 || moduleId > this.config.totalSteps) {
            throw new Error(`NavigationController: ID de m√≥dulo inv√°lido: ${moduleId}`);
        }

        this.completedModules.delete(moduleId);

        console.log(`üîÑ M√≥dulo ${moduleId} desmarcado como completo`);

        // Atualizar visualiza√ß√£o
        this.#updateProgressBar();
        this.#updateModuleIndicators();

        // Disparar evento
        this.#dispatchEvent('progressUpdated', {
            moduleId,
            progress: this.getProgress(),
            completedModules: Array.from(this.completedModules)
        });

        // Salvar estado
        this.saveNavigationState();
    }

    /**
     * Obt√©m lista de m√≥dulos bloqueados com motivos
     * @returns {Array<Object>} [ { moduleId, reason }, ... ]
     */
    getBlockedModules() {
        return Array.from(this.blockedModules.entries()).map(([moduleId, reason]) => ({
            moduleId,
            reason
        }));
    }

    /**
     * Obt√©m lista de pr√≥ximos m√≥dulos dispon√≠veis para navega√ß√£o
     * @returns {Array<number>} IDs dos m√≥dulos permitidos
     */
    getAllowedNextModules() {
        const allowed = [];

        for (let i = 1; i <= this.config.totalSteps; i++) {
            if (i !== this.currentModule && this.canNavigateTo(i)) {
                allowed.push(i);
            }
        }

        return allowed;
    }

    /**
     * Salva estado da navega√ß√£o no localStorage
     */
    saveNavigationState() {
        const state = {
            currentModule: this.currentModule,
            completedModules: Array.from(this.completedModules),
            lockedModules: Array.from(this.lockedModules),
            blockedModules: Array.from(this.blockedModules.entries()),
            navigationHistory: this.navigationHistory,
            timestamp: Date.now()
        };

        try {
            localStorage.setItem('creditscore_navigation_state', JSON.stringify(state));
            console.log('üíæ Estado de navega√ß√£o salvo');
        } catch (error) {
            console.error('‚ùå Erro ao salvar estado de navega√ß√£o:', error);
        }
    }

    /**
     * Restaura estado da navega√ß√£o do localStorage
     * @returns {boolean} true se restaurado com sucesso
     */
    restoreNavigationState() {
        try {
            const saved = localStorage.getItem('creditscore_navigation_state');

            if (!saved) {
                console.log('‚ÑπÔ∏è Nenhum estado de navega√ß√£o salvo encontrado');
                return false;
            }

            const state = JSON.parse(saved);

            // Validar estrutura
            if (!state || typeof state !== 'object') {
                throw new Error('Estado salvo inv√°lido');
            }

            // Verificar idade dos dados (n√£o restaurar se > 7 dias)
            const age = Date.now() - state.timestamp;
            const MAX_AGE = 7 * 24 * 60 * 60 * 1000; // 7 dias

            if (age > MAX_AGE) {
                console.log('‚ÑπÔ∏è Estado de navega√ß√£o muito antigo, descartando');
                localStorage.removeItem('creditscore_navigation_state');
                return false;
            }

            // Validar estrutura do estado restaurado
            if (typeof state.currentModule !== 'number') {
                throw new Error('NavigationController: estado restaurado possui currentModule inv√°lido');
            }

            if (!Array.isArray(state.completedModules)) {
                throw new Error('NavigationController: estado restaurado possui completedModules inv√°lido');
            }

            if (!Array.isArray(state.lockedModules)) {
                throw new Error('NavigationController: estado restaurado possui lockedModules inv√°lido');
            }

            if (!Array.isArray(state.blockedModules)) {
                throw new Error('NavigationController: estado restaurado possui blockedModules inv√°lido');
            }

            if (!Array.isArray(state.navigationHistory)) {
                throw new Error('NavigationController: estado restaurado possui navigationHistory inv√°lido');
            }

            // Restaurar estado validado
            this.currentModule = state.currentModule;
            this.completedModules = new Set(state.completedModules);
            this.lockedModules = new Set(state.lockedModules);
            this.blockedModules = new Map(state.blockedModules);
            this.navigationHistory = state.navigationHistory;

            console.log('‚úÖ Estado de navega√ß√£o restaurado');
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao restaurar estado de navega√ß√£o:', error);
            return false;
        }
    }

    /**
     * Limpa estado de navega√ß√£o salvo
     */
    clearNavigationState() {
        localStorage.removeItem('creditscore_navigation_state');
        console.log('üóëÔ∏è Estado de navega√ß√£o limpo');
    }

    // ============================================
    // M√âTODOS PRIVADOS
    // ============================================

    /**
     * Obt√©m configura√ß√£o de um m√≥dulo pelo ID
     * @private
     * @param {number} moduleId
     * @returns {Object|null}
     */
    #getModuleConfig(moduleId) {
        const module = this.config.modules.find(m => m.id === moduleId);

        if (!module) {
            return null;
        }

        return module;
    }

    /**
     * Atualiza barra de progresso visual
     * @private
     */
    #updateProgressBar() {
        const percentage = this.getProgress();
        const completedCount = this.completedModules.size;
        const totalModules = this.config.totalSteps;

        // Atualizar barra de progresso
        const progressBar = document.querySelector('.progress-bar');
        if (progressBar) {
            progressBar.style.width = `${percentage}%`;
            progressBar.setAttribute('aria-valuenow', percentage.toString());
        }

        // Atualizar texto de progresso
        const progressText = document.querySelector('.progress-text');
        if (progressText) {
            progressText.textContent = `${completedCount} de ${totalModules} m√≥dulos completos (${percentage}%)`;
        }

        console.log(`üìä Progresso: ${percentage}% (${completedCount}/${totalModules})`);
    }

    /**
     * Atualiza indicadores visuais dos m√≥dulos (status icons)
     * @private
     */
    #updateModuleIndicators() {
        this.config.modules.forEach(module => {
            const tabElement = document.querySelector(`[data-tab="${module.id}"]`);
            if (!tabElement) {
                return; // Tab n√£o existe no DOM
            }

            // Remover classes e √≠cones anteriores
            tabElement.classList.remove('completed', 'in-progress', 'locked', 'blocked');

            // Remover √≠cones de status existentes
            const existingIcon = tabElement.querySelector('.status-icon');
            if (existingIcon) {
                existingIcon.remove();
            }

            // Aplicar novo estado e √≠cone
            if (this.completedModules.has(module.id)) {
                tabElement.classList.add('completed');
                this.#addStatusIcon(tabElement, '‚úÖ');
            } else if (module.id === this.currentModule) {
                tabElement.classList.add('in-progress');
                this.#addStatusIcon(tabElement, 'üîÑ');
            } else if (this.lockedModules.has(module.id) || this.blockedModules.has(module.id)) {
                tabElement.classList.add('locked');
                this.#addStatusIcon(tabElement, 'üîí');
            } else if (module.id > this.currentModule && module.required === true) {
                tabElement.classList.add('locked');
                this.#addStatusIcon(tabElement, 'üîí');
            }
        });
    }

    /**
     * Adiciona √≠cone de status a um elemento de tab
     * @private
     * @param {HTMLElement} tabElement
     * @param {string} icon
     */
    #addStatusIcon(tabElement, icon) {
        const iconSpan = document.createElement('span');
        iconSpan.className = 'status-icon';
        iconSpan.textContent = ` ${icon}`;
        tabElement.appendChild(iconSpan);
    }

    /**
     * Verifica se todos m√≥dulos obrigat√≥rios est√£o completos
     * @private
     */
    #checkAllModulesCompleted() {
        const requiredModules = this.config.modules
            .filter(m => m.required === true && m.computed !== true);

        const allRequiredCompleted = requiredModules.every(m =>
            this.completedModules.has(m.id)
        );

        if (allRequiredCompleted) {
            console.log('üéâ Todos m√≥dulos obrigat√≥rios completos!');

            this.#dispatchEvent('allModulesCompleted', {
                completedModules: Array.from(this.completedModules),
                progress: this.getProgress()
            });
        }
    }

    /**
     * Dispara evento customizado
     * @private
     * @param {string} eventName
     * @param {Object} detail
     */
    #dispatchEvent(eventName, detail) {
        const event = new CustomEvent(eventName, {
            detail,
            bubbles: true,
            cancelable: false
        });

        document.dispatchEvent(event);
        console.log(`üì° Evento disparado: ${eventName}`, detail);
    }
}

// Exporta√ß√£o global (compatibilidade com m√≥dulos n√£o-ES6)
if (typeof window !== 'undefined') {
    window.NavigationController = NavigationController;
}
