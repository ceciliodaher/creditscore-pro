/**
 * calculation-orchestrator.js
 * Orquestrador centralizado de c√°lculos
 *
 * Coordena workflow de c√°lculo, validation, dependencies
 * SOLID: Open/Closed Principle - extens√≠vel para novos calculators
 * DRY: L√≥gica de coordena√ß√£o centralizada
 * NO FALLBACKS: Valida√ß√£o rigorosa, exce√ß√µes expl√≠citas
 *
 * @version 1.0.0
 * @date 2025-01-25
 */

import { calculationState } from './calculation-state.js';
import { validationEngine, ValidationError } from './validation-engine.js';

/**
 * Orquestrador de c√°lculos
 */
export class CalculationOrchestrator {
    #calculators = new Map();
    #history = [];
    #maxHistorySize = 10; // PRD requirement: √∫ltimos 10 c√°lculos

    constructor() {
        console.log('üéØ [CalculationOrchestrator] Inicializado');
        this.loadHistory();
    }

    // ====================================================================
    // Calculator Registration (Dependency Injection)
    // ====================================================================

    /**
     * Registra calculator para uso
     * @param {string} name - Nome do calculator
     * @param {Object} calculator - Inst√¢ncia do calculator
     */
    registerCalculator(name, calculator) {
        if (!calculator || typeof calculator.calcular !== 'function') {
            throw new Error(`Calculator '${name}' deve ter m√©todo calcular()`);
        }

        this.#calculators.set(name, calculator);
        console.log(`üìù [CalculationOrchestrator] Calculator '${name}' registrado`);
    }

    /**
     * Remove calculator
     * @param {string} name
     */
    unregisterCalculator(name) {
        this.#calculators.delete(name);
        console.log(`üóëÔ∏è [CalculationOrchestrator] Calculator '${name}' removido`);
    }

    /**
     * Verifica se calculator est√° registrado
     * @param {string} name
     * @returns {boolean}
     */
    hasCalculator(name) {
        return this.#calculators.has(name);
    }

    // ====================================================================
    // Main Calculation Workflow
    // ====================================================================

    /**
     * Executa workflow completo de c√°lculo
     * @returns {Promise<Object>} Resultados dos c√°lculos
     * @throws {ValidationError} Se dados inv√°lidos
     * @throws {Error} Se c√°lculo falhar
     */
    async performAllCalculations() {
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üéØ [CalculationOrchestrator] Iniciando workflow');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

        calculationState.setCalculating(true);

        try {
            // STEP 1: Coletar dados (NO FALLBACKS)
            const data = this.#collectData();

            // STEP 2: Validar ANTES de calcular (FAIL FAST)
            const validation = await validationEngine.validate(data, 'full');

            if (!validation.isValid) {
                throw new ValidationError(
                    'Dados incompletos ou inv√°lidos para c√°lculo',
                    validation.errors
                );
            }

            if (validation.warnings.length > 0) {
                console.warn('‚ö†Ô∏è [CalculationOrchestrator] Warnings:', validation.warnings);
            }

            // STEP 3: Executar c√°lculos (respeitando depend√™ncias)
            const results = await this.#executeCalculations(data);

            // STEP 4: Salvar no hist√≥rico
            this.#addToHistory({
                timestamp: new Date().toISOString(),
                data: this.#createDataSnapshot(data),
                results,
                validation
            });

            // STEP 5: Atualizar estado
            calculationState.markCalculated({
                validation,
                results,
                timestamp: new Date()
            });

            console.log('‚úÖ [CalculationOrchestrator] Workflow conclu√≠do com sucesso');

            return results;

        } catch (error) {
            console.error('‚ùå [CalculationOrchestrator] Falha no workflow:', error);

            calculationState.setError(error);

            // Re-lan√ßa erro (NO SILENT FAILURES)
            throw error;

        } finally {
            calculationState.setCalculating(false);
        }
    }

    // ====================================================================
    // Data Collection (NO FALLBACKS)
    // ====================================================================

    /**
     * Coleta dados do localStorage
     * @private
     * @returns {Object}
     * @throws {Error} Se dados obrigat√≥rios faltarem
     */
    #collectData() {
        console.log('üì• [CalculationOrchestrator] Coletando dados...');

        const required = [
            'balanco',
            'dre',
            'endividamento',
            'compliance',
            'concentracao-risco'
        ];

        const data = {};
        const missing = [];

        for (const key of required) {
            const value = localStorage.getItem(key);

            if (!value) {
                missing.push(key);
            } else {
                try {
                    data[key] = JSON.parse(value);
                } catch (error) {
                    throw new Error(
                        `Dados corrompidos em '${key}': ${error.message}`
                    );
                }
            }
        }

        // NO FALLBACKS - fail explicitly
        if (missing.length > 0) {
            throw new Error(
                `Dados obrigat√≥rios n√£o fornecidos: ${missing.join(', ')}`
            );
        }

        console.log('‚úì Dados coletados:', Object.keys(data));

        return data;
    }

    // ====================================================================
    // Calculation Execution (Dependency Graph)
    // ====================================================================

    /**
     * Executa c√°lculos na ordem correta (dependency graph)
     * @private
     * @returns {Promise<Object>}
     */
    async #executeCalculations(data) {
        console.log('‚öôÔ∏è [CalculationOrchestrator] Executando c√°lculos...');

        const results = {};

        // Ordem de execu√ß√£o (respeita depend√™ncias)
        const executionOrder = [
            'indices',  // √çndices financeiros (sem depend√™ncias)
            'scoring'   // Scoring (depende de √≠ndices)
        ];

        for (const name of executionOrder) {
            const calculator = this.#calculators.get(name);

            if (!calculator) {
                console.warn(`‚ö†Ô∏è Calculator '${name}' n√£o registrado - pulando`);
                continue;
            }

            try {
                console.log(`   ‚îú‚îÄ Executando '${name}'...`);

                // Passa dados + resultados anteriores (para depend√™ncias)
                const result = await calculator.calcular(data, results);

                results[name] = result;

                console.log(`   ‚îú‚îÄ '${name}' conclu√≠do ‚úì`);

            } catch (error) {
                throw new Error(
                    `Falha no calculator '${name}': ${error.message}`
                );
            }
        }

        console.log('‚úÖ Todos os c√°lculos executados');

        return results;
    }

    // ====================================================================
    // History Management (PRD Requirement)
    // ====================================================================

    /**
     * Adiciona entrada ao hist√≥rico
     * @private
     */
    #addToHistory(entry) {
        this.#history.push(entry);

        // Manter apenas √∫ltimos 10 (PRD requirement)
        if (this.#history.length > this.#maxHistorySize) {
            this.#history.shift();
        }

        this.saveHistory();

        console.log(`üìù Hist√≥rico atualizado (${this.#history.length}/${this.#maxHistorySize} entradas)`);
    }

    /**
     * Cria snapshot dos dados para hist√≥rico
     * @private
     */
    #createDataSnapshot(data) {
        return {
            balanco: {
                patrimonioLiquido: data.balanco.patrimonioLiquido,
                ativoTotal: data.balanco.ativoTotal,
                passivoTotal: data.balanco.passivoTotal
            },
            dre: {
                receitaLiquida: data.dre.receitaLiquida,
                lucroLiquido: data.dre.lucroLiquido
            }
        };
    }

    /**
     * Retorna hist√≥rico de c√°lculos
     * @returns {Array}
     */
    getHistory() {
        return [...this.#history]; // Retorna c√≥pia
    }

    /**
     * Retorna √∫ltima entrada do hist√≥rico
     * @returns {Object|null}
     */
    getLastHistoryEntry() {
        return this.#history.length > 0 ? this.#history[this.#history.length - 1] : null;
    }

    /**
     * Limpa hist√≥rico
     */
    clearHistory() {
        this.#history = [];
        this.saveHistory();
        console.log('üóëÔ∏è Hist√≥rico limpo');
    }

    /**
     * Salva hist√≥rico no localStorage
     */
    saveHistory() {
        try {
            localStorage.setItem('calculationHistory', JSON.stringify(this.#history));
        } catch (error) {
            console.error('[CalculationOrchestrator] Falha ao salvar hist√≥rico:', error);
            // NO FALLBACK - erro vis√≠vel
        }
    }

    /**
     * Carrega hist√≥rico do localStorage
     */
    loadHistory() {
        try {
            const saved = localStorage.getItem('calculationHistory');

            if (saved) {
                this.#history = JSON.parse(saved);
                console.log(`üì• Hist√≥rico carregado (${this.#history.length} entradas)`);
            }
        } catch (error) {
            console.error('[CalculationOrchestrator] Falha ao carregar hist√≥rico:', error);
            this.#history = [];
        }
    }

    // ====================================================================
    // UI Update Helpers
    // ====================================================================

    /**
     * Atualiza UI com resultados
     * @param {Object} results
     */
    updateUI(results) {
        // Dispatch custom event (decoupled)
        const event = new CustomEvent('calculationsCompleted', {
            detail: results,
            bubbles: true
        });

        document.dispatchEvent(event);

        console.log('üì° Evento "calculationsCompleted" disparado');
    }

    // ====================================================================
    // Debug & Info
    // ====================================================================

    /**
     * Informa√ß√µes de debug
     * @returns {Object}
     */
    debug() {
        return {
            calculatorsRegistered: Array.from(this.#calculators.keys()),
            historySize: this.#history.length,
            maxHistorySize: this.#maxHistorySize,
            lastCalculation: this.getLastHistoryEntry()?.timestamp || null
        };
    }

    /**
     * Loga estado atual
     */
    log() {
        console.group('üéØ CalculationOrchestrator - Estado Atual');
        console.log('Calculators registrados:', Array.from(this.#calculators.keys()));
        console.log('Hist√≥rico:', `${this.#history.length}/${this.#maxHistorySize} entradas`);
        console.log('√öltimo c√°lculo:', this.getLastHistoryEntry()?.timestamp || 'Nunca');
        console.groupEnd();
    }
}

// ====================================================================
// Singleton Instance
// ====================================================================

export const orchestrator = new CalculationOrchestrator();

// Disponibilizar globalmente
if (typeof window !== 'undefined') {
    window.CalculationOrchestrator = CalculationOrchestrator;
    window.calculationOrchestrator = orchestrator;
}
