/* =====================================
   CREDITSCORE-MODULE.JS
   M√≥dulo Principal - Orquestrador
   Sistema de An√°lise de Cr√©dito e Compliance Financeiro
   Integra: Calculadores + An√°lise + Scoring + Compliance
   NO HARDCODED DATA - NO FALLBACKS - KISS - DRY - SOLID
   ===================================== */

import { FormGenerator } from './form-generator.js';
import { NavigationController } from './navigation-controller.js';
import { AutoSave } from './auto-save.js';

class CreditScoreModule {
    constructor(config) {
        // Valida√ß√£o expl√≠cita - NO FALLBACKS
        if (!config) {
            throw new Error('CreditScoreModule: config obrigat√≥ria n√£o fornecida');
        }

        if (!config.database) {
            throw new Error('CreditScoreModule: config.database obrigat√≥rio');
        }

        if (!config.database.name) {
            throw new Error('CreditScoreModule: config.database.name obrigat√≥rio');
        }

        if (!config.database.version) {
            throw new Error('CreditScoreModule: config.database.version obrigat√≥rio');
        }

        this.config = config;
        this.dbName = config.database.name;
        this.dbVersion = config.database.version;
        this.db = null;
        this.dadosFormulario = new Map();

        // Core infrastructure
        this.formGenerator = null;
        this.navigationController = null;
        this.autoSave = null;
        this.dbManager = null; // Proxy to CreditscoreIndexedDB static methods
        this.hierarchicalNav = null; // tabs.js instance
        this.messages = null;

        // Calculadores
        this.indicesCalculator = null;
        this.scoringEngine = null;
        this.analiseCalculator = null;
        this.capitalGiroCalculator = null;

        // Compliance
        this.complianceChecker = null;

        // Exportadores
        this.exportadorExcel = null;
        this.exportadorPDF = null;

        console.log('‚úÖ CreditScoreModule instanciado');
    }
    
    // ==========================================
    // INICIALIZA√á√ÉO
    // ==========================================

    /**
     * Inicializa o m√≥dulo completo
     */
    async init() {
        try {
            console.log('üöÄ Inicializando Sistema de An√°lise de Cr√©dito...');

            // Verificar configura√ß√£o obrigat√≥ria
            this.validarConfiguracao();

            // Verificar depend√™ncias obrigat√≥rias
            this.verificarDependencias();

            // Inicializar infraestrutura core (FormGenerator, NavigationController, AutoSave)
            await this.initCoreInfrastructure();

            // Inicializar IndexedDB
            await this.initIndexedDB();

            // Inicializar calculadores
            await this.initCalculadores();

            // Inicializar compliance checker
            await this.initCompliance();

            // Inicializar exportadores
            await this.initExportadores();

            console.log('‚úÖ CreditScoreModule inicializado com sucesso');

        } catch (error) {
            console.error('‚ùå Erro ao inicializar CreditScoreModule:', error);
            throw error;
        }
    }

    /**
     * Inicializa infraestrutura core com Dependency Injection
     *
     * ‚ö†Ô∏è ATEN√á√ÉO: Este m√≥dulo usa Dependency Injection
     * As depend√™ncias DEVEM ser injetadas ANTES de chamar init():
     * - this.hierarchicalNav (HierarchicalNavigation instance)
     * - this.navigationController (NavigationController instance)
     * - this.autoSave (AutoSave instance)
     * - this.dbManager (dbManager proxy)
     * - this.formGenerator (FormGenerator instance)
     *
     * ORDEM CORRETA NO MAIN APP:
     * 1. const creditScore = new CreditScoreModule(config)
     * 2. creditScore.hierarchicalNav = hierarchicalNav
     * 3. creditScore.navigationController = navigationController
     * 4. creditScore.autoSave = autoSave
     * 5. creditScore.dbManager = dbManager
     * 6. creditScore.formGenerator = formGenerator
     * 7. await creditScore.init() // <-- Valida depend√™ncias injetadas
     *
     * @throws {Error} Se qualquer depend√™ncia n√£o foi injetada ou √© inv√°lida
     */
    async initCoreInfrastructure() {
        console.log('üîß Validando depend√™ncias injetadas...');

        // 1. Validar que HierarchicalNavigation foi injetado
        if (!this.hierarchicalNav) {
            throw new Error('CreditScoreModule: hierarchicalNav n√£o foi injetado - obrigat√≥rio. Main app deve injetar via creditScore.hierarchicalNav = ...');
        }

        // Validar que √© uma inst√¢ncia v√°lida (tem getCurrentTab)
        if (typeof this.hierarchicalNav.getCurrentTab !== 'function') {
            throw new Error('CreditScoreModule: hierarchicalNav injetado n√£o possui API esperada (getCurrentTab)');
        }

        // 2. Validar que NavigationController foi injetado
        if (!this.navigationController) {
            throw new Error('CreditScoreModule: navigationController n√£o foi injetado - obrigat√≥rio. Main app deve injetar via creditScore.navigationController = ...');
        }

        // 3. Validar que AutoSave foi injetado
        if (!this.autoSave) {
            throw new Error('CreditScoreModule: autoSave n√£o foi injetado - obrigat√≥rio. Main app deve injetar via creditScore.autoSave = ...');
        }

        // 4. Validar que dbManager foi injetado
        if (!this.dbManager) {
            throw new Error('CreditScoreModule: dbManager n√£o foi injetado - obrigat√≥rio. Main app deve injetar via creditScore.dbManager = ...');
        }

        // Validar API esperada
        if (typeof this.dbManager.save !== 'function' || typeof this.dbManager.get !== 'function') {
            throw new Error('CreditScoreModule: dbManager injetado n√£o possui API esperada (save, get)');
        }

        // 5. Validar que FormGenerator foi injetado
        if (!this.formGenerator) {
            throw new Error('CreditScoreModule: formGenerator n√£o foi injetado - obrigat√≥rio. Main app deve injetar via creditScore.formGenerator = ...');
        }

        // 6. Validar que messages.json foi carregado globalmente
        if (!window.MESSAGES) {
            throw new Error('CreditScoreModule: window.MESSAGES n√£o dispon√≠vel - messages.json deve ser carregado');
        }
        this.messages = window.MESSAGES;

        // 7. Conectar eventos entre componentes
        this.setupCoreEventListeners();

        console.log('‚úÖ Todas as depend√™ncias validadas com sucesso');
        console.log('‚úÖ Infraestrutura core inicializada');
    }

    /**
     * Configura listeners de eventos entre os componentes core
     */
    setupCoreEventListeners() {
        // FormGenerator -> AutoSave (marcar dados como dirty)
        document.addEventListener('fieldChanged', (event) => {
            const { field, value, moduleId } = event.detail;
            console.log(`üìù Campo alterado: ${field} no m√≥dulo ${moduleId}`);

            // AutoSave vai detectar mudan√ßas automaticamente atrav√©s do mutation observer
            // Mas podemos for√ßar um save se necess√°rio
            if (this.autoSave) {
                this.autoSave.markDirty();
            }
        });

        // FormGenerator -> NavigationController (m√≥dulo completado)
        document.addEventListener('moduleCompleted', (event) => {
            const { moduleId, completionData } = event.detail;
            console.log(`‚úÖ M√≥dulo ${moduleId} completado`);

            if (this.navigationController) {
                this.navigationController.markModuleComplete(moduleId, completionData);
            }
        });

        // NavigationController -> AutoSave (progresso atualizado)
        document.addEventListener('progressUpdated', (event) => {
            const { progress } = event.detail;
            console.log(`üìä Progresso atualizado: ${progress.percentage}%`);

            // Trigger auto-save quando progresso √© atualizado
            if (this.autoSave) {
                this.autoSave.markDirty();
            }
        });

        // AutoSave -> Notifica√ß√£o ao usu√°rio (dados restaurados)
        document.addEventListener('autoSaveRestored', (event) => {
            const { timestamp, dataSize } = event.detail;
            console.log(`üíæ Auto-save restaurado: ${new Date(timestamp).toLocaleString()}`);

            // Notificar usu√°rio via toast ou modal
            this.notifyUser({
                type: 'info',
                title: 'Dados Restaurados',
                message: `Seus dados foram restaurados automaticamente (${dataSize} bytes salvos em ${new Date(timestamp).toLocaleString()})`
            });
        });

        // AutoSave -> Notifica√ß√£o ao usu√°rio (auto-save realizado)
        document.addEventListener('autoSaveCompleted', (event) => {
            const { timestamp, dataSize } = event.detail;
            this.atualizarStatusSave(`Salvo √†s ${new Date(timestamp).toLocaleTimeString()}`, 'success');
        });

        // AutoSave -> Notifica√ß√£o ao usu√°rio (erro no auto-save)
        document.addEventListener('autoSaveError', (event) => {
            const { error } = event.detail;
            console.error('‚ùå Erro no auto-save:', error);
            this.atualizarStatusSave('Erro ao salvar', 'error');
        });

        console.log('‚úÖ Event listeners configurados');
    }

    /**
     * Notifica o usu√°rio com mensagem (toast, modal, etc.)
     */
    notifyUser(notification) {
        const { type, title, message } = notification;

        // Usar toast se dispon√≠vel
        if (window.Toast) {
            window.Toast.show(message, type);
        } else {
            // Fallback para console
            console.log(`[${type.toUpperCase()}] ${title}: ${message}`);
        }
    }
    
    /**
     * Valida configura√ß√£o obrigat√≥ria
     */
    validarConfiguracao() {
        if (!this.config) {
            throw new Error('CreditScoreModule: Configura√ß√£o obrigat√≥ria n√£o fornecida');
        }
        
        const requiredConfigKeys = ['systemName', 'version', 'modules', 'database'];
        const missingKeys = requiredConfigKeys.filter(key => !this.config.hasOwnProperty(key));
        
        if (missingKeys.length > 0) {
            throw new Error(`CreditScoreModule: Chaves de configura√ß√£o ausentes: ${missingKeys.join(', ')}`);
        }
        
        console.log('‚úÖ Configura√ß√£o v√°lida');
    }
    
    /**
     * Verifica depend√™ncias obrigat√≥rias
     */
    verificarDependencias() {
        const dependenciasObrigatorias = [
            'IndicesFinanceirosCalculator',
            'ScoringEngine', 
            'AnaliseVerticalHorizontal',
            'CapitalGiroCalculator'
        ];
        
        const dependenciasOpcionais = [
            'ComplianceChecker',
            'ExportadorExcel',
            'ExportadorPDF'
        ];
        
        // Verificar depend√™ncias obrigat√≥rias
        const faltandoObrigatorias = dependenciasObrigatorias.filter(dep => 
            typeof window[dep] === 'undefined'
        );
        
        if (faltandoObrigatorias.length > 0) {
            throw new Error(`CreditScoreModule: Depend√™ncias obrigat√≥rias ausentes - ${faltandoObrigatorias.join(', ')}`);
        }
        
        // Verificar depend√™ncias opcionais
        const faltandoOpcionais = dependenciasOpcionais.filter(dep => 
            typeof window[dep] === 'undefined'
        );
        
        if (faltandoOpcionais.length > 0) {
            console.warn(`‚ö†Ô∏è Depend√™ncias opcionais ausentes: ${faltandoOpcionais.join(', ')}`);
        }
        
        console.log('‚úÖ Depend√™ncias verificadas');
    }
    
    /**
     * Inicializa IndexedDB usando schema configurado
     */
    async initIndexedDB() {
        try {
            // Usar configura√ß√£o do database
            const dbConfig = this.config.database;
            
            // Verificar se IndexedDB est√° dispon√≠vel
            if (!window.indexedDB) {
                throw new Error('IndexedDB n√£o suportado pelo navegador');
            }
            
            // Abrir database
            this.db = await this.openDatabase(dbConfig.name, dbConfig.version, dbConfig.stores);
            
            console.log(`‚úÖ IndexedDB conectado: ${dbConfig.name} v${dbConfig.version}`);
            
        } catch (error) {
            throw new Error(`CreditScoreModule: Erro ao conectar IndexedDB - ${error.message}`);
        }
    }
    
    /**
     * Abre database IndexedDB
     */
    openDatabase(name, version, stores) {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(name, version);
            
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve(request.result);
            
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                
                // Criar object stores baseado na configura√ß√£o
                Object.entries(stores).forEach(([storeName, storeConfig]) => {
                    if (!db.objectStoreNames.contains(storeName)) {
                        const store = db.createObjectStore(storeName, {
                            keyPath: storeConfig.keyPath,
                            autoIncrement: storeConfig.autoIncrement || false
                        });
                        
                        // Criar √≠ndices
                        if (storeConfig.indexes) {
                            Object.entries(storeConfig.indexes).forEach(([indexName, indexConfig]) => {
                                store.createIndex(indexName, indexName, indexConfig);
                            });
                        }
                        
                        console.log(`‚úÖ Object store criado: ${storeName}`);
                    }
                });
            };
        });
    }
    
    /**
     * Inicializa calculadores
     */
    async initCalculadores() {
        // √çndices Financeiros Calculator
        if (window.IndicesFinanceirosCalculator) {
            this.indicesCalculator = new window.IndicesFinanceirosCalculator(this.config, this.messages); // ‚úÖ Passa messages
            if (typeof this.indicesCalculator.init === 'function') {
                await this.indicesCalculator.init();
            }
        }

        // Scoring Engine
        if (window.ScoringEngine) {
            this.scoringEngine = new window.ScoringEngine(this.config, this.messages, this.scoringCriteria); // ‚úÖ Passa config, messages E scoringCriteria
            if (typeof this.scoringEngine.init === 'function') {
                await this.scoringEngine.init();
            }
        }

        // An√°lise Vertical e Horizontal
        if (window.AnaliseVerticalHorizontal) {
            this.analiseCalculator = new window.AnaliseVerticalHorizontal(this.config, this.messages); // ‚úÖ Passa messages
            if (typeof this.analiseCalculator.init === 'function') {
                await this.analiseCalculator.init();
            }
        }

        // Capital de Giro Calculator
        if (window.CapitalGiroCalculator) {
            this.capitalGiroCalculator = new window.CapitalGiroCalculator(this.config, this.messages); // ‚úÖ Passa messages
            if (typeof this.capitalGiroCalculator.init === 'function') {
                await this.capitalGiroCalculator.init();
            }
        }

        console.log('‚úÖ Calculadores inicializados');
    }
    
    /**
     * Inicializa compliance checker
     */
    async initCompliance() {
        if (window.ComplianceChecker) {
            this.complianceChecker = new window.ComplianceChecker(this.config);
            if (typeof this.complianceChecker.init === 'function') {
                await this.complianceChecker.init();
            }
            console.log('‚úÖ Compliance checker inicializado');
        } else {
            console.warn('‚ö†Ô∏è ComplianceChecker n√£o dispon√≠vel');
        }
    }
    
    /**
     * Inicializa exportadores
     */
    async initExportadores() {
        // Excel Exporter
        if (window.ExportadorExcel) {
            this.exportadorExcel = new window.ExportadorExcel(this.config);
            if (typeof this.exportadorExcel.init === 'function') {
                await this.exportadorExcel.init();
            }
        }
        
        // PDF Exporter
        if (window.ExportadorPDF) {
            this.exportadorPDF = new window.ExportadorPDF(this.config);
            if (typeof this.exportadorPDF.init === 'function') {
                await this.exportadorPDF.init();
            }
        }
        
        console.log('‚úÖ Exportadores inicializados');
    }
    
    // ==========================================
    // GERENCIAMENTO DE DADOS
    // ==========================================
    
    /**
     * Coleta todos os dados do formul√°rio
     */
    coletarDadosFormulario() {
        const formData = new FormData(document.getElementById('creditScoreForm'));
        const dados = {};
        
        // Converter FormData para objeto
        for (const [key, value] of formData.entries()) {
            dados[key] = value;
        }
        
        // Adicionar dados din√¢micos salvos
        this.dadosFormulario.forEach((value, key) => {
            dados[key] = value;
        });
        
        return dados;
    }
    
    /**
     * Restaura dados no formul√°rio
     */
    restaurarDadosFormulario(dados) {
        if (!dados || typeof dados !== 'object') {
            console.warn('CreditScoreModule.restaurarDadosFormulario: Dados inv√°lidos');
            return;
        }
        
        // Restaurar campos do formul√°rio
        Object.entries(dados).forEach(([key, value]) => {
            const element = document.getElementById(key) || document.querySelector(`[name="${key}"]`);
            
            if (element) {
                if (element.type === 'checkbox' || element.type === 'radio') {
                    element.checked = Boolean(value);
                } else {
                    element.value = value;
                }
                
                // Disparar evento change para atualizar depend√™ncias
                element.dispatchEvent(new Event('change', { bubbles: true }));
            } else {
                // Salvar dados din√¢micos
                this.dadosFormulario.set(key, value);
            }
        });
        
        console.log('‚úÖ Dados do formul√°rio restaurados');
    }
    
    /**
     * Salva dados no IndexedDB
     */
    async salvarDados(storeName, dados) {
        if (!this.db) {
            throw new Error('Database n√£o inicializado');
        }
        
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([storeName], 'readwrite');
            const store = transaction.objectStore(storeName);
            
            const request = store.put(dados);
            
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
        });
    }
    
    /**
     * Carrega dados do IndexedDB
     */
    async carregarDados(storeName, id) {
        if (!this.db) {
            throw new Error('Database n√£o inicializado');
        }
        
        return new Promise((resolve, reject) => {
            const transaction = this.db.transaction([storeName], 'readonly');
            const store = transaction.objectStore(storeName);
            
            const request = store.get(id);
            
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
        });
    }
    
    // ==========================================
    // AN√ÅLISE E C√ÅLCULOS
    // ==========================================
    
    /**
     * Executa an√°lise completa de cr√©dito
     */
    async executarAnaliseCompleta(dados) {
        try {
            console.log('üîç Iniciando an√°lise completa de cr√©dito...');
            
            const resultado = {
                timestamp: new Date().toISOString(),
                dadosOriginais: dados,
                indices: null,
                analiseVerticalHorizontal: null,
                capitalGiro: null,
                scoring: null,
                compliance: null,
                alertas: [],
                recomendacoes: []
            };
            
            // 1. Calcular √≠ndices financeiros
            if (this.indicesCalculator && dados.demonstracoes) {
                resultado.indices = await this.indicesCalculator.calcularTodos(dados.demonstracoes);
                console.log('‚úÖ √çndices financeiros calculados');
            }
            
            // 2. An√°lise vertical e horizontal
            if (this.analiseCalculator && dados.demonstracoes) {
                resultado.analiseVerticalHorizontal = await this.analiseCalculator.analisar(dados.demonstracoes);
                console.log('‚úÖ An√°lise vertical/horizontal realizada');
            }
            
            // 3. An√°lise de capital de giro
            if (this.capitalGiroCalculator && resultado.indices) {
                resultado.capitalGiro = await this.capitalGiroCalculator.analisar(resultado.indices);
                console.log('‚úÖ An√°lise de capital de giro realizada');
            }
            
            // 4. Calcular scoring de cr√©dito
            if (this.scoringEngine) {
                resultado.scoring = await this.scoringEngine.calcularScoring({
                    dadosCadastrais: dados.cadastro,
                    dadosFinanceiros: resultado.indices,
                    dadosEndividamento: dados.endividamento,
                    dadosCompliance: dados.compliance
                });
                console.log('‚úÖ Scoring de cr√©dito calculado');
            }
            
            // 5. Verifica√ß√µes de compliance
            if (this.complianceChecker && dados.cadastro) {
                resultado.compliance = await this.complianceChecker.verificar(dados.cadastro);
                console.log('‚úÖ Verifica√ß√µes de compliance realizadas');
            }
            
            // 6. Gerar alertas baseados na configura√ß√£o
            resultado.alertas = this.gerarAlertas(resultado);
            
            // 7. Gerar recomenda√ß√µes
            resultado.recomendacoes = this.gerarRecomendacoes(resultado);
            
            console.log('‚úÖ An√°lise completa finalizada');
            return resultado;
            
        } catch (error) {
            console.error('‚ùå Erro na an√°lise completa:', error);
            throw error;
        }
    }
    
    /**
     * Gera alertas baseados nos resultados
     */
    gerarAlertas(resultado) {
        const alertas = [];
        const alertsConfig = this.config.alerts || {};
        
        // Alertas cr√≠ticos
        if (alertsConfig.critico) {
            alertsConfig.critico.forEach(criterio => {
                if (this.verificarCriterio(criterio, resultado)) {
                    alertas.push({
                        tipo: 'critico',
                        criterio,
                        descricao: this.getDescricaoCriterio(criterio),
                        timestamp: new Date().toISOString()
                    });
                }
            });
        }
        
        return alertas;
    }
    
    /**
     * Gera recomenda√ß√µes baseadas nos resultados
     */
    gerarRecomendacoes(resultado) {
        const recomendacoes = [];
        
        // Recomenda√ß√µes baseadas no scoring
        if (resultado.scoring && resultado.scoring.classificacao) {
            const classificacao = resultado.scoring.classificacao;
            
            if (classificacao.rating === 'AAA' || classificacao.rating === 'AA') {
                recomendacoes.push({
                    tipo: 'aprovacao',
                    descricao: 'Risco baixo. Aprova√ß√£o recomendada com condi√ß√µes preferenciais.',
                    prioridade: 'alta'
                });
            } else if (classificacao.rating === 'C' || classificacao.rating === 'D') {
                recomendacoes.push({
                    tipo: 'rejeicao',
                    descricao: 'Risco alto. Rejei√ß√£o recomendada ou solicitar garantias adicionais.',
                    prioridade: 'alta'
                });
            }
        }
        
        return recomendacoes;
    }
    
    /**
     * Verifica crit√©rio de alerta
     */
    verificarCriterio(criterio, resultado) {
        // TODO: Implementar l√≥gica de verifica√ß√£o de crit√©rios
        switch (criterio) {
            case 'liquidezBaixa':
                return resultado.indices?.liquidezCorrente < 1.0;
            case 'endividamentoAlto':
                return resultado.indices?.endividamentoTotal > 0.7;
            default:
                return false;
        }
    }
    
    /**
     * Obt√©m descri√ß√£o do crit√©rio
     */
    getDescricaoCriterio(criterio) {
        const descricoes = {
            'liquidezBaixa': 'Liquidez corrente abaixo do m√≠nimo recomendado',
            'endividamentoAlto': 'N√≠vel de endividamento acima do limite aceit√°vel',
            'prejuizoConsecutivo': 'Preju√≠zos em exerc√≠cios consecutivos',
            'situacaoIrregular': 'Irregularidades cadastrais identificadas'
        };
        
        return descricoes[criterio] || `Crit√©rio ${criterio} atingido`;
    }
    
    // ==========================================
    // UTILIT√ÅRIOS
    // ==========================================
    
    /**
     * Atualiza status de salvamento na interface
     */
    atualizarStatusSave(mensagem, tipo = 'info') {
        const statusElement = document.getElementById('saveStatusText');
        if (statusElement) {
            statusElement.textContent = mensagem;
            statusElement.className = `save-status-${tipo}`;
        }
    }
    
    /**
     * Limpa dados salvos
     */
    async limparDadosSalvos() {
        if (!this.db) return;
        
        try {
            const stores = Object.keys(this.config.database.stores);
            
            for (const storeName of stores) {
                const transaction = this.db.transaction([storeName], 'readwrite');
                const store = transaction.objectStore(storeName);
                await store.clear();
            }
            
            console.log('‚úÖ Dados salvos limpos');
        } catch (error) {
            console.error('‚ùå Erro ao limpar dados:', error);
        }
    }
    
    /**
     * Obt√©m estat√≠sticas do sistema
     */
    async obterEstatisticas() {
        if (!this.db) return null;
        
        try {
            const stats = {};
            const stores = Object.keys(this.config.database.stores);
            
            for (const storeName of stores) {
                const transaction = this.db.transaction([storeName], 'readonly');
                const store = transaction.objectStore(storeName);
                const count = await store.count();
                stats[storeName] = count;
            }
            
            return stats;
        } catch (error) {
            console.error('‚ùå Erro ao obter estat√≠sticas:', error);
            return null;
        }
    }
}

// Disponibilizar globalmente
window.CreditScoreModule = CreditScoreModule;

console.log('‚úÖ CreditScoreModule carregado');